% LTE RF Receiver Simulation

% Simulation Parameters
Fs = 7.68e6; % Sampling Frequency in Hz
T = 1/Fs;    % Sampling Period in seconds
N = 1024;    % Number of samples

% Generate LTE Waveform (Random Signal)
lteWaveform = randi([0, 1], N, 1) * 2 - 1;  % Generate Random BPSK Symbols

% FIR Filter Design
FIR_order = 32;  % Filter order
F_cutoff = 2.25e6;  % Cutoff frequency
h = fir1(FIR_order, F_cutoff/(Fs/2), 'low'); % Low-pass filter

% Transmit the waveform through FIR filter
filtered_waveform = filter(h, 1, lteWaveform);

% Add Free Space Path Loss (simplified model)
distance = 1000; % Distance in meters
c = 3e8; % Speed of light
f = 2.5e9; % Frequency of LTE signal
FSPL = (4*pi*distance*f/c)^2; % Free space path loss
transmitted_signal = filtered_waveform / FSPL;

% Add AWGN noise
SNR = 20; % Signal-to-noise ratio in dB
received_signal = awgn(transmitted_signal, SNR, 'measured');

% RF Demodulation (mixing with local oscillator)
f_LO = 2.5e9; % Local oscillator frequency
t = (0:N-1)*T; % Time vector
local_oscillator = exp(1j*2*pi*f_LO*t');  % Complex exponential for mixing

demodulated_signal = real(received_signal .* local_oscillator);

% ADC Simulation (Quantization)
ADC_bits = 10; % 10-bit ADC
quantization_levels = 2^ADC_bits;
adc_output = round(demodulated_signal * (quantization_levels/2)) / (quantization_levels/2);

% DC Offset Cancellation (High-pass filter to remove DC component)
hp_filter = designfilt('highpassiir','FilterOrder', 8, 'PassbandFrequency', 0.1, 'PassbandRipple', 0.2, 'SampleRate', Fs);
final_output = filtfilt(hp_filter, adc_output);

% Plot results
figure;
subplot(3,1,1); plot(lteWaveform); title('Original LTE Waveform'); grid on;
subplot(3,1,2); plot(real(received_signal)); title('Received Signal with Noise'); grid on;
subplot(3,1,3); plot(final_output); title('Final Output after DC Offset Cancellation'); grid on;

% Error Vector Magnitude (EVM) Calculation
ideal_signal = lteWaveform; % Use original signal as reference
error_signal = final_output - ideal_signal(1:length(final_output));
evm_rms = rms(error_signal) / rms(ideal_signal) * 100; % EVM in percentage
fprintf('EVM (RMS) = %.2f%%\n', evm_rms);

